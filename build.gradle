plugins {
    id "com.jfrog.bintray" version "1.8.4" apply false
}

allprojects() {
    apply plugin: "idea"
    apply plugin: "jacoco"

    version = "2.0.0"
    description = "Small webhook dispatcher host a Spark webserver and receive webhook payloads."

    ext {
        repoUrl = "https://gitlab.com/Elypia/webhooker.git"
    }

    repositories {
        jcenter()
    }

    jacoco {
        toolVersion = "0.8.4"
    }
}

subprojects() {
    apply plugin: "java-library"
    apply plugin: "maven-publish"
    apply plugin: "com.jfrog.bintray"

    sourceCompatibility = 11
    targetCompatibility = 11

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    jar {
        from sourceSets.main.allSource

        manifest {
            attributes "Implementation-Title": "WebHooker",
                       "Implementation-Version": version
        }
    }

    dependencies {
        // Logging
        implementation "org.slf4j:slf4j-api:1.7.26"
        testRuntimeOnly "ch.qos.logback:logback-classic:1.2.3"

        // Testing
        testImplementation "org.junit.jupiter:junit-jupiter:5.4.2"
        testImplementation "org.mockito:mockito-core:2.28.2"
        testImplementation "com.squareup.okhttp3:okhttp:3.14.2"
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport

        reports {
            html.enabled = false
        }
    }

    jacocoTestReport {
        reports {
            html.enabled = true
            xml.enabled = false
        }
    }

    /**
     * Upload to Bintray
     */

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = "sources"
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir

        javadoc {
            options.addBooleanOption("html5", true)

            options {
                links += [
                    "https://docs.oracle.com/javase/10/docs/api/"
                ]
            }
        }
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    bintray {
        user = System.getenv("BINTRAY_USER")
        key = System.getenv("BINTRAY_KEY")
        publications = [this.name]
        publish = true

        pkg {
            repo = this.name
            name = this.name
            userOrg = "elypia"
            licenses = ["Apache-2.0"]
            vcsUrl = repoUrl

            version {
                name = version
                desc = description
                released = new Date()
            }
        }
    }

    publishing {
        def details = {
            licenses{
                license {
                    name "The Apache Software License, Version 2.0"
                    url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    distribution this.name
                }
            }

            developers{
                developer {
                    id "Seth"
                    name "Seth"
                    email "seth@elypia.com"
                }
            }

            scm{
                url repoUrl
            }
        }

        publications {
            WebHooker(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                groupId "com.elypia"
                artifactId this.name
                version version

                pom.withXml {
                    def root = asNode()

                    root.appendNode("description", projectDescription)
                    root.appendNode("name", this.name)
                    root.appendNode("url", "https://elypia.com/")
                    root.children().last() + details
                }
            }
        }
    }
}
