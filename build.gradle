plugins {
    id "java-library"
    id "idea"
    id "jacoco"
    id "maven-publish"
    id "com.jfrog.bintray" version "1.8.4"
}

ext {
    projectVersion = "1.0.0"
    projectDescription = "Small webhook receiver to get webhook payloads and map them to methods."
    projectGit = "https://gitlab.com/Elypia/WebHooker.git"

    junitVersion = "5.3.2"
}

jar {
    from sourceSets.main.allSource

    manifest {
        attributes  "Implementation-Title"   : this.name,
                    "Implementation-Version" : projectVersion
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport

    reports {
        html.enabled = false
    }
}

jacoco {
    toolVersion = "0.8.2"
}

jacocoTestReport {
    reports {
        html.enabled = false
        xml.enabled = true
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spark (Webserver)
    implementation "com.sparkjava:spark-core:2.8.0"

    // GSON (JSON Library)
    implementation "com.google.code.gson:gson:2.8.5"

    // Logging
    implementation "org.slf4j:slf4j-api:1.7.25"
    testRuntimeOnly "ch.qos.logback:logback-classic:1.2.3"

    // Testing
    testImplementation "com.squareup.okhttp3:okhttp:3.12.1"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testRuntimeOnly "org.junit.platform:junit-platform-runner:1.3.2"
}

/**
 * Upload to Bintray
 */

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir

    javadoc {
        options.addBooleanOption("html5", true)

        options {
            links += [
                "https://docs.oracle.com/javase/10/docs/api/"
            ]
        }
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

bintray {
    user = System.getenv("BINTRAY_USER")
    key = System.getenv("BINTRAY_KEY")
    publications = [this.name]
    publish = true

    pkg {
        repo = this.name
        name = this.name
        userOrg = "elypia"
        licenses = ["Apache-2.0"]
        vcsUrl = projectGit

        version {
            name = projectVersion
            desc = projectDescription
            released = new Date()
        }
    }
}

publishing {
    def details = {
        licenses{
            license {
                name "The Apache Software License, Version 2.0"
                url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                distribution this.name
            }
        }

        developers{
            developer {
                id "Seth"
                name "Seth"
                email "seth@elypia.com"
            }
        }

        scm{
            url projectGit
        }
    }

    publications {
        WebHooker(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId "com.elypia"
            artifactId this.name
            version projectVersion

            pom.withXml {
                def root = asNode()

                root.appendNode("description", projectDescription)
                root.appendNode("name", this.name)
                root.appendNode("url", "https://elypia.com/")
                root.children().last() + details
            }
        }
    }
}

/**
 * Test reporting and code coverage to Codacy.
 */

configurations {
    codacy
}

repositories {
    maven {
        url "https://jitpack.io"
    }

    maven {
        url "http://dl.bintray.com/typesafe/maven-releases"
    }
}

dependencies {
    codacy 'com.github.codacy:codacy-coverage-reporter:-SNAPSHOT'
}

task codacyCoverage(type: JavaExec, dependsOn: check) {
    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy

    args = [
        "report", "-l", "Java", "-r", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    ]
}
