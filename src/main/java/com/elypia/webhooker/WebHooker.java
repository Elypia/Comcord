package com.elypia.webhooker;

import com.elypia.webhooker.annotation.Receiver;

import java.io.*;
import java.net.ServerSocket;
import java.util.*;

import static spark.Spark.*;

/**
 * This class should be used as a singleton where possible.
 * There is no need to create multiple web servers.
 * Regardless of service map the payload where it needs to go and perform
 * the task as required.
 */
public class WebHooker implements Closeable {

    private static final String PATH = "/%s/:class/:method";

    private static final int MIN_PORT = 49152;
    private static final int MAX_PORT = 65535;

    private final String domain;

    /**
     * The endpoint used to receive webhook payloads is comprised of
     * 3 parts. <br>
     * <strong>UUID:</strong> A randomly generated UUID to
     * make webhook URLS less predictable.
     * (This is generated by WebHooker.)<br>
     * <strong>Module:</strong> An indicator of which payload receiver
     * to relay this payload to. <br>
     * <strong>Request:</strong> An indicator of which method to relay
     * the payload to.
     */
    private final String endpoint;

    private Collection<Receiver> receivers;

    private PayloadDispatcher dispatcher;

    public WebHooker(String domain) throws IOException {
        this(domain, 0);
    }

    public WebHooker(String domain, int port) throws IOException {
        this(domain, port, UUID.randomUUID());
    }

    public WebHooker(String domain, int port, UUID uuid) throws IOException {
        if (port == 0) {
            try (ServerSocket socket = new ServerSocket(0)) {
                port = socket.getLocalPort();
            }
        }

        this.domain = domain;
        endpoint = String.format(PATH, uuid);
        receivers = new ArrayList<>();
        dispatcher = new PayloadDispatcher(this);

        port(port);

        post(endpoint, (request, response) -> {
            dispatcher.dispatch(request, response);
            return response.body();
        });
    }

    public boolean add(Receiver... rec) {
        return receivers.addAll(Arrays.asList(rec));
    }

    public Collection<Receiver> getReceivers() {
        return receivers;
    }

    public String getUrl(String module, String request) {
        String url = domain;

        if (url.endsWith("/"))
            url = url.substring(0, url.length() - 1);

        if (port() != 80)
            url += ":" + port();

        return url + endpoint
            .replace(":class", module)
            .replace(":method", request);
    }

    @Override
    public void close() {
        stop();
    }
}
